# DSA-coding-task
#include<bits/stdc++.h>
using namespace std;


struct Node
{
    int data;
    Node* left;
    Node* right;
};


Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    
    return temp;
}


Node* buildTree(string str)
{   
   
    if(str.length() == 0 || str[0] == 'N')
            return NULL;
   
    vector<string> ip;
    
    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);
        
    Node* root = newNode(stoi(ip[0]));
    
    queue<Node*> queue;
    queue.push(root);
   
    int i = 1;
    while(!queue.empty() && i < ip.size()) {
            
        Node* currNode = queue.front();
        queue.pop();
        
        string currVal = ip[i];
            
        
        if(currVal != "N") {
                
            
            currNode->left = newNode(stoi(currVal));
                
           
            queue.push(currNode->left);
        }
            
       
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];
            
        
        if(currVal != "N") {
                
            
            currNode->right = newNode(stoi(currVal));
                
            
            queue.push(currNode->right);
        }
        i++;
    }
    
    return root;
}

class solver
{
private:

public:
void go_down(Node* root,int h,vector<int> &a)
    {
        if(!root)
        return;
        if(h==0)
        {
            a.push_back(root->data);
            return;
        }
        go_down(root->left,h-1,a); go_down(root->right,h-1,a);
    }
 int traverse(Node* root,int x,int k,vector<int> &a)
    {
        if(!root)
        return 0;
        if(root->data==x)
        {
            go_down(root,k,a);
            return 1;
        }
        int l=traverse(root->left,x,k,a);
        if(l && l<=k)
        {
            if(l==k)
            a.push_back(root->data);
            else
            go_down(root->right,k-l-1,a);
            return l+1;
        }
        int r=traverse(root->right,x,k,a);
        if(r && r<=k)
        {
            if(r==k)
            a.push_back(root->data);
            else
            go_down(root->left,k-r-1,a);
            return r+1;
        }
        return 0;
    }
    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
         vector<int> a;
        traverse(root,target,k,a);
        sort(a.begin(),a.end());
        return a;
    }
};

int main()
{
    int t;
    cin>>t;
    getchar();
    
    solver x = solver();
    
    while(t--)
    {
        string s;
        getline(cin,s);
        Node* head = buildTree(s);
        
        int target, k;
        cin>> target >> k;
        getchar();
        
        vector <int> res = x.KDistanceNodes(head, target, k);
        
        for( int i=0; i<res.size(); i++ )
            cout<< res[i] << " ";
        cout<<endl;
    }
    return 0;
}
  
