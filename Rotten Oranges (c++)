

#include <bits/stdc++.h>
#include<iostream>
using namespace std;


void rot(vector<vector<int>>&m, int r, int c, int x, int y, queue<pair<int, int>>&q, vector<vector<int>>&visited) {
    if(x+1<r && (m[x+1][y] == 1) && !visited[x+1][y]) {
        m[x+1][y] = 2;
        q.push({x+1, y});
    }
    if(x-1>=0 && m[x-1][y] == 1 && !visited[x-1][y]) {
        m[x-1][y] = 2;
        q.push({x-1, y});
    }
    if(y-1>=0 && m[x][y-1] == 1 && !visited[x][y-1]) {
        m[x][y-1] = 2;
        q.push({x, y-1});
    }
    if(y+1<c && m[x][y+1] == 1 && !visited[x][y+1]) {
        m[x][y+1] = 2;
        q.push({x, y+1});
    }
}
void rotOranges(vector<vector<int> > &matrix, int R, int C)
{
     queue<pair<int, int>> q;
    vector<vector<int>> visited(R, vector<int>(C, 0));
    for(int i=0; i<R; i++) {
        for(int j=0; j<C; j++) {
            if(matrix[i][j] == 2)
                q.push({i, j});
        }
    }
    q.push({-1, -1});
    int ans = 0;
    while(!q.empty()) {
        pair<int, int> p = q.front();
        q.pop();
        int x = p.first, y = p.second;
        if(x < 0) {
            ans = max(ans, abs(x));
            if(!q.empty())
                q.push({x-1, y-1});
            continue;
        }
        visited[x][y] = 1;
        rot(matrix, R, C, x, y, q, visited);
    }
    bool res=false;
    int fresh=0;
    int rotten=0;
    for(int i=0; i<R; i++) {
        for(int j=0; j<C; j++) {
            
            if(matrix[i][j] == 1){
                res=true;
                fresh++;
            }
            if(matrix[i][j]==2) rotten++;
        }
        
    }
    if(res) ans=0;
  cout<<"time frames: "<<ans-1<<endl;
  cout<<"fresh oranges: "<<fresh<<endl;
   cout<<"Rotten oranges: "<<rotten<<endl; 
}

int main()
{
   
        int R,C;
        cin>>R>>C;
        vector<vector<int> > matrix(R);
        for(int i=0;i<R;++i)
        {
            matrix[i].resize(C);
            for(int j=0;j<C;++j)
                cin>>matrix[i][j];
        }
        rotOranges(matrix,R,C);
    
    return 0;
}  
